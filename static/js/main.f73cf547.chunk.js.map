{"version":3,"sources":["Piece/Piece.module.css","Machine/Machine.module.css","Machine/Machine.ts","Piece/PieceView.tsx","Piece/PieceList.tsx","Machine/MachineView.tsx","Queue/ObservableArrayQueue.ts","Queue/ArrayQueue.ts","Queue/ObservableLinkedListQueue.ts","Queue/LinkedListQueue.ts","App.tsx","index.tsx"],"names":["module","exports","Machine","queue","this","pieces","makeObservable","clear","lastProcessed","undefined","isEmpty","current","peek","timeLeft","dequeue","piece","isFull","enqueue","observable","contents","action","computed","observer","className","styles","code","PieceList","style","pieceList","map","p","machine","buttonList","onClick","chance","Chance","addPiece","word","length","capitalize","addRandom","progress","dump","reset","ObservableArrayQueue","size","atom","createAtom","item","reportChanged","result","reportObserved","array","head","tail","count","Array","Error","slice","filter","i","ObservableLinkedListQueue","firstNode","lastNode","newNode","next","arr","currentNode","push","state","useLocalObservable","useArrayQueue","type","name","id","checked","onChange","e","target","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,KAAO,sB,mBCA3FD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,kBAAoB,mCAAmC,WAAa,8B,oICGpGC,G,mBAIjB,WAAYC,GAAuB,+FAC/BC,KAAKC,OAASF,EACdG,YAAeF,M,yCAGnB,WACIA,KAAKC,OAAOE,QACZH,KAAKI,mBAAgBC,I,sBAGzB,WACI,IAAIL,KAAKC,OAAOK,UAAhB,CACA,IAAMC,EAAUP,KAAKC,OAAOO,OAC5BD,EAAQE,UAAY,EAChBF,EAAQE,UAAY,IAAGT,KAAKI,cAAgBJ,KAAKC,OAAOS,c,kBAGhE,WACQV,KAAKC,OAAOK,YAChBN,KAAKI,cAAgBJ,KAAKC,OAAOS,a,sBAGrC,SAAiBC,GACTX,KAAKY,QACTZ,KAAKC,OAAOY,QAAQC,YAAWH,M,qBAGnC,WACI,OAAQX,KAAKC,OAAOK,Y,oBAGxB,WACI,OAAON,KAAKC,OAAOc,a,kBAGvB,WACI,OAAOf,KAAKC,OAAOW,a,yCAvCtBE,K,yGACAA,K,+FAOAE,K,sGAKAA,K,qGAOAA,K,qGAKAA,K,0GAKAC,K,0GAIAA,K,uGAIAA,K,+GCxBUC,eAXG,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAH,OACd,sBAAKQ,UAAWC,IAAOT,MAAvB,UACI,qBAAKQ,UAAWC,IAAOC,KAAvB,SACI,+BAAOV,EAAMU,SAEjB,qBAAKF,UAAWC,IAAOX,SAAvB,SACI,+BAAOE,EAAMF,mBCEVa,EARG,SAAC,GAAD,IAAGrB,EAAH,EAAGA,OAAH,OACd,qBAAKkB,UAAWI,IAAMC,UAAtB,SACKvB,EAAOwB,KAAI,SAAAC,GAAC,OACT,cAAC,EAAD,CAAWf,MAAOe,GAAQA,EAAEL,Y,iBCgCzBH,eAzBK,SAAC,GAAD,IAAGS,EAAH,EAAGA,QAAH,OAChB,sBAAKR,UAAWC,IAAOO,QAAvB,UACI,sBAAKR,UAAWC,IAAOQ,WAAvB,UACI,wBAAQC,QAAS,kBAXX,SAACF,GACf,IAAMG,EAAS,IAAIC,IACnBJ,EAAQK,SAAS,CACbX,KAAMS,EAAOG,KAAK,CAAEC,OAAQ,EAAGC,YAAY,IAC3C1B,SAAU,IAOiB2B,CAAUT,IAAjC,8DACA,wBAAQE,QAAS,kBAAMF,EAAQU,YAA/B,0EACA,wBAAQR,QAAS,kBAAMF,EAAQW,QAA/B,4CACA,wBAAQT,QAAS,kBAAMF,EAAQY,SAA/B,iEAGJ,yMACmC,IAC9BZ,EAAQvB,eACL,iCACKuB,EAAQvB,cAAciB,KAAM,IAC5BM,EAAQvB,cAAcK,SAAW,GAC9B,iGAAuB,UAIvC,uBACA,+EACCkB,EAAQZ,SAASmB,OAAS,GAAK,cAAC,EAAD,CAAWjC,OAAQ0B,EAAQZ,iB,sCCpC9CyB,E,kDAGjB,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IAHOC,UAES,EAEtB,EAAKA,KAAOC,YAAW,wBAFD,E,2CAK1B,SAAQC,GACJ,+DAAcA,GACd5C,KAAK0C,KAAKG,kB,qBAGd,WACI,IAAMC,EAAM,gEAEZ,OADA9C,KAAK0C,KAAKG,gBACHC,I,kBAGX,WAEI,OADA9C,KAAK0C,KAAKK,iBACH,+D,mBAGX,WACI/C,KAAK0C,KAAKG,gBACV,gE,oBAGJ,WAEI,OADA7C,KAAK0C,KAAKK,iBACH,iE,oBAGX,WAEI,OADA/C,KAAK0C,KAAKK,iBACH,iE,qBAGX,WAEI,OADA/C,KAAK0C,KAAKK,iBACH,kE,sBAGX,WAEI,OADA/C,KAAK0C,KAAKK,iBACH,qE,cCzCX,WAAqBN,GAAe,yBAAfA,OAAc,KAL3BO,WAK2B,OAJ3BC,UAI2B,OAH3BC,UAG2B,OAF3BC,MAAQ,EAGZnD,KAAKgD,MAAQI,MAASX,EAAO,GAC7BzC,KAAKiD,KAAO,EACZjD,KAAKkD,KAAO,E,2CAGhB,SAAQN,GACJ,GAAI5C,KAAKY,SAAU,MAAM,IAAIyC,MAAM,iBACnCrD,KAAKgD,MAAMhD,KAAKkD,MAAQN,EACxB5C,KAAKkD,MAAQlD,KAAKkD,KAAO,IAAMlD,KAAKyC,KAAO,GAC3CzC,KAAKmD,OAAS,I,qBAGlB,WACI,GAAInD,KAAKM,UAAW,MAAM,IAAI+C,MAAM,kBACpC,IAAMP,EAAS9C,KAAKQ,OAKpB,OAJAR,KAAKgD,MAAMhD,KAAKiD,WAAQ5C,EACxBL,KAAKiD,MAAQjD,KAAKiD,KAAO,IAAMjD,KAAKyC,KAAO,GAC3CzC,KAAKmD,OAAS,EAEPL,I,kBAGX,WACI,GAAI9C,KAAKM,UAAW,MAAM,IAAI+C,MAAM,kBAEpC,OAAOrD,KAAKgD,MAAMhD,KAAKiD,Q,mBAG3B,WACIjD,KAAKmD,MAAQ,EACbnD,KAAKgD,MAAQI,MAASpD,KAAKyC,KAAO,GAClCzC,KAAKiD,KAAO,EACZjD,KAAKkD,KAAO,I,oBAGhB,WACI,OAAOlD,KAAKmD,Q,oBAGhB,WACI,OAAOnD,KAAKmD,QAAUnD,KAAKyC,O,qBAG/B,WACI,OAAsB,IAAfzC,KAAKmD,Q,sBAGhB,WACI,OAAInD,KAAKkD,MAAQlD,KAAKiD,KACXjD,KAAKgD,MACPM,MAAMtD,KAAKiD,KAAMjD,KAAKkD,KAAO,GAC7BK,QAAO,SAACC,GAAD,YAAqBnD,IAANmD,KAEpB,sBACAxD,KAAKgD,MAAMM,MAAMtD,KAAKiD,OADtB,YAEAjD,KAAKgD,MAAMM,MAAM,EAAGtD,KAAKkD,QAC9BK,QAAO,SAACC,GAAD,YAAqBnD,IAANmD,S,MC9DfC,E,kDAGjB,aAAe,IAAD,8BACV,gBAHaf,UAEH,EAEV,EAAKA,KAAOC,YAAW,wBAFb,E,2CAKd,SAAQC,GACJ,+DAAcA,GACd5C,KAAK0C,KAAKG,kB,qBAGd,WACI,IAAMC,EAAM,gEAEZ,OADA9C,KAAK0C,KAAKG,gBACHC,I,kBAGX,WAEI,OADA9C,KAAK0C,KAAKK,iBACH,+D,mBAGX,WACI/C,KAAK0C,KAAKG,gBACV,gE,oBAGJ,WAEI,OADA7C,KAAK0C,KAAKK,iBACH,iE,oBAGX,WAEI,OADA/C,KAAK0C,KAAKK,iBACH,iE,qBAGX,WAEI,OADA/C,KAAK0C,KAAKK,iBACH,kE,sBAGX,WAEI,OADA/C,KAAK0C,KAAKK,iBACH,qE,oDCzCHW,e,OACAC,c,OACAlB,KAAO,E,2CAEf,SAAQG,GACJ,IAAMgB,EAAU,CAAEhB,QAEb5C,KAAK0D,UAGC1D,KAAK2D,WACZ3D,KAAK2D,SAASE,KAAOD,EACrB5D,KAAK2D,SAAW3D,KAAK2D,SAASE,OAJ9B7D,KAAK0D,UAAYE,EACjB5D,KAAK2D,SAAWC,GAMpB5D,KAAKyC,MAAQ,I,qBAGjB,WACI,IAAKzC,KAAK0D,UAAW,MAAM,IAAIL,MAAM,kBACrC,IAAMP,EAAS9C,KAAK0D,UAAUd,KAG9B,OAFI5C,KAAK2D,WAAa3D,KAAK0D,YAAW1D,KAAK2D,cAAWtD,GACtDL,KAAK0D,UAAY1D,KAAK0D,UAAUG,KACzBf,I,kBAGX,WACI,IAAK9C,KAAK0D,UAAW,MAAM,IAAIL,MAAM,kBACrC,OAAOrD,KAAK0D,UAAUd,O,mBAG1B,WACI5C,KAAK0D,eAAYrD,EACjBL,KAAK2D,cAAWtD,I,oBAGpB,WACI,OAAOL,KAAKyC,O,oBAGhB,WACI,OAAO,I,qBAGX,WACI,OAAQzC,KAAK0D,Y,sBAGjB,WAGI,IAFA,IAAMI,EAAM,GACRC,EAAc/D,KAAK0D,UAChBK,GACHD,EAAIE,KAAKD,EAAYnB,MACrBmB,EAAcA,EAAYF,KAG9B,OAAOC,M,MCrCA5C,mBAnBf,WACI,IAAM+C,EAAQC,aAAmB,iBAAO,CAAEC,eAAe,MACnDpE,EAAQkE,EAAME,cACd,IAAI3B,EAA4B,GAChC,IAAIiB,EACJ9B,EAAU,IAAI7B,EAAQC,GAE5B,OACI,qCACI,uBAAOqE,KAAK,QAAQC,KAAK,OAAOC,GAAG,KAAKC,QAASN,EAAME,cAAeK,SAAUxD,aAAO,SAAAyD,GAAOR,EAAME,cAAgBM,EAAEC,OAAOH,aAC7H,uBAAOI,QAAQ,KAAf,8GACA,uBACA,uBAAOP,KAAK,QAAQC,KAAK,OAAOC,GAAG,KAAKC,SAAUN,EAAME,cAAeK,SAAUxD,aAAO,SAAAyD,GAAOR,EAAME,eAAiBM,EAAEC,OAAOH,aAC/H,uBAAOI,QAAQ,KAAf,wDACA,cAAC,EAAD,CAAahD,QAASA,UClBlCiD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.f73cf547.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceList\":\"Piece_pieceList__3QWS1\",\"piece\":\"Piece_piece__3YSQf\",\"code\":\"Piece_code__2Sh0w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"machine\":\"Machine_machine__Bibia\",\"idkWhatToCallThis\":\"Machine_idkWhatToCallThis__yzbY3\",\"buttonList\":\"Machine_buttonList__30CQA\"};","import { action, computed, makeObservable, observable } from 'mobx'\nimport IQueue from '../Queue/IQueue'\nimport Piece from '../Piece/Piece'\n\nexport default class Machine {\n    @observable private pieces: IQueue<Piece>\n    @observable lastProcessed?: Piece\n\n    constructor(queue: IQueue<Piece>) {\n        this.pieces = queue\n        makeObservable(this)\n    }\n\n    @action reset() {\n        this.pieces.clear()\n        this.lastProcessed = undefined\n    }\n\n    @action progress() {\n        if (this.pieces.isEmpty()) return\n        const current = this.pieces.peek()\n        current.timeLeft -= 1\n        if (current.timeLeft <= 0) this.lastProcessed = this.pieces.dequeue()\n    }\n\n    @action dump() {\n        if (this.pieces.isEmpty()) return\n        this.lastProcessed = this.pieces.dequeue()\n    }\n\n    @action addPiece(piece: Piece) {\n        if (this.isFull) return\n        this.pieces.enqueue(observable(piece))\n    }\n\n    @computed get anyQueued() {\n        return !this.pieces.isEmpty()\n    }\n\n    @computed get contents() {\n        return this.pieces.contents()\n    }\n\n    @computed get isFull() {\n        return this.pieces.isFull()\n    }\n}\n","import { observer } from 'mobx-react'\nimport Piece from './Piece'\nimport styles from './Piece.module.css'\n\ntype Props = {\n    piece: Piece\n}\n\nconst PieceView = ({ piece }: Props) => (\n    <div className={styles.piece}>\n        <div className={styles.code}>\n            <span>{piece.code}</span>\n        </div>\n        <div className={styles.timeLeft}>\n            <span>{piece.timeLeft}</span>\n        </div>\n    </div>\n)\n\nexport default observer(PieceView)\n","import style from './Piece.module.css'\nimport Piece from './Piece'\nimport PieceView from './PieceView'\n\ntype Props = {\n    pieces: Piece[]\n}\n\nconst PieceList = ({ pieces }: Props) => (\n    <div className={style.pieceList}>\n        {pieces.map(p => (\n            <PieceView piece={p} key={p.code} />\n        ))}\n    </div>\n)\n\nexport default PieceList\n","import { observer } from 'mobx-react'\nimport styles from './Machine.module.css'\nimport PieceList from '../Piece/PieceList'\nimport Machine from './Machine'\nimport Chance from 'chance'\n\ntype Props = {\n    machine: Machine\n}\n\nconst addRandom = (machine: Machine) => {\n    const chance = new Chance()\n    machine.addPiece({\n        code: chance.word({ length: 4, capitalize: false }),\n        timeLeft: 5,\n    })\n}\n\nconst MachineView = ({ machine }: Props) => (\n    <div className={styles.machine}>\n        <div className={styles.buttonList}>\n            <button onClick={() => addRandom(machine)}>добавить</button>\n            <button onClick={() => machine.progress()}>обработать</button>\n            <button onClick={() => machine.dump()}>снять</button>\n            <button onClick={() => machine.reset()}>сбросить</button>\n        </div>\n\n        <span>\n            Последняя обработанная деталь:{' '}\n            {machine.lastProcessed && (\n                <span>\n                    {machine.lastProcessed.code}{' '}\n                    {machine.lastProcessed.timeLeft > 0 &&\n                        '(снята с обработки)'}{' '}\n                </span>\n            )}\n        </span>\n        <br />\n        <span>Очередь:</span>\n        {machine.contents.length > 0 && <PieceList pieces={machine.contents} />}\n    </div>\n)\n\nexport default observer(MachineView)\n","import { createAtom, IAtom } from 'mobx'\nimport ArrayQueue from './ArrayQueue'\n\nexport default class ObservableArrayQueue<T> extends ArrayQueue<T> {\n    private readonly atom: IAtom\n\n    constructor(size: number) {\n        super(size)\n        this.atom = createAtom('ObservableArrayQueue')\n    }\n\n    enqueue(item: T) {\n        super.enqueue(item)\n        this.atom.reportChanged()\n    }\n\n    dequeue() {\n        const result = super.dequeue()\n        this.atom.reportChanged()\n        return result\n    }\n\n    peek() {\n        this.atom.reportObserved()\n        return super.peek()\n    }\n\n    clear() {\n        this.atom.reportChanged()\n        super.clear()\n    }\n\n    length() {\n        this.atom.reportObserved()\n        return super.length()\n    }\n\n    isFull() {\n        this.atom.reportObserved()\n        return super.isFull()\n    }\n\n    isEmpty() {\n        this.atom.reportObserved()\n        return super.isEmpty()\n    }\n\n    contents() {\n        this.atom.reportObserved()\n        return super.contents()\n    }\n}\n","import IQueue from './IQueue'\n\nexport default class ArrayQueue<T> implements IQueue<T> {\n    private array: (T | undefined)[]\n    private head: number\n    private tail: number\n    private count = 0\n\n    constructor(readonly size: number) {\n        this.array = Array<T>(size + 1)\n        this.head = 0\n        this.tail = 0\n    }\n\n    enqueue(item: T): void {\n        if (this.isFull()) throw new Error('Queue is full')\n        this.array[this.tail] = item\n        this.tail = (this.tail + 1) % (this.size + 1)\n        this.count += 1\n    }\n\n    dequeue(): T {\n        if (this.isEmpty()) throw new Error('Queue is empty')\n        const result = this.peek()\n        this.array[this.head] = undefined\n        this.head = (this.head + 1) % (this.size + 1)\n        this.count -= 1\n\n        return result\n    }\n\n    peek(): T {\n        if (this.isEmpty()) throw new Error('Queue is empty')\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.array[this.head]!\n    }\n\n    clear() {\n        this.count = 0\n        this.array = Array<T>(this.size + 1)\n        this.head = 0\n        this.tail = 0\n    }\n\n    length(): number {\n        return this.count\n    }\n\n    isFull(): boolean {\n        return this.count === this.size\n    }\n\n    isEmpty(): boolean {\n        return this.count === 0\n    }\n\n    contents(): T[] {\n        if (this.tail >= this.head) {\n            return this.array\n                .slice(this.head, this.tail + 1)\n                .filter((i): i is T => i !== undefined)\n        } else\n            return [\n                ...this.array.slice(this.head),\n                ...this.array.slice(0, this.tail),\n            ].filter((i): i is T => i !== undefined)\n    }\n}\n","import { IAtom, createAtom } from 'mobx'\nimport LinkedListQueue from './LinkedListQueue'\n\nexport default class ObservableLinkedListQueue<T> extends LinkedListQueue<T> {\n    private readonly atom: IAtom\n\n    constructor() {\n        super()\n        this.atom = createAtom('ObservableArrayQueue')\n    }\n\n    enqueue(item: T) {\n        super.enqueue(item)\n        this.atom.reportChanged()\n    }\n\n    dequeue() {\n        const result = super.dequeue()\n        this.atom.reportChanged()\n        return result\n    }\n\n    peek() {\n        this.atom.reportObserved()\n        return super.peek()\n    }\n\n    clear() {\n        this.atom.reportChanged()\n        super.clear()\n    }\n\n    length() {\n        this.atom.reportObserved()\n        return super.length()\n    }\n\n    isFull() {\n        this.atom.reportObserved()\n        return super.isFull()\n    }\n\n    isEmpty() {\n        this.atom.reportObserved()\n        return super.isEmpty()\n    }\n\n    contents() {\n        this.atom.reportObserved()\n        return super.contents()\n    }\n}\n","import IQueue from './IQueue'\n\ntype Node<T> = {\n    item: T\n    next?: Node<T>\n}\n\nexport default class LinkedListQueue<T> implements IQueue<T> {\n    private firstNode?: Node<T>\n    private lastNode?: Node<T>\n    private size = 0\n\n    enqueue(item: T): void {\n        const newNode = { item }\n\n        if (!this.firstNode) {\n            this.firstNode = newNode\n            this.lastNode = newNode\n        } else if (this.lastNode) {\n            this.lastNode.next = newNode\n            this.lastNode = this.lastNode.next\n        }\n\n        this.size += 1\n    }\n\n    dequeue(): T {\n        if (!this.firstNode) throw new Error('Queue is empty')\n        const result = this.firstNode.item\n        if (this.lastNode === this.firstNode) this.lastNode = undefined\n        this.firstNode = this.firstNode.next\n        return result\n    }\n\n    peek(): T {\n        if (!this.firstNode) throw new Error('Queue is empty')\n        return this.firstNode.item\n    }\n\n    clear(): void {\n        this.firstNode = undefined\n        this.lastNode = undefined\n    }\n\n    length(): number {\n        return this.size\n    }\n\n    isFull(): boolean {\n        return false\n    }\n\n    isEmpty(): boolean {\n        return !this.firstNode\n    }\n\n    contents(): T[] {\n        const arr = []\n        let currentNode = this.firstNode\n        while (currentNode) {\n            arr.push(currentNode.item)\n            currentNode = currentNode.next\n        }\n\n        return arr\n    }\n}\n","import { action } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react'\nimport Machine from './Machine/Machine'\nimport MachineView from './Machine/MachineView'\nimport Piece from './Piece/Piece'\nimport ObservableArrayQueue from './Queue/ObservableArrayQueue'\nimport ObservableLinkedListQueue from './Queue/ObservableLinkedListQueue'\n\nfunction App() {\n    const state = useLocalObservable(() => ({ useArrayQueue: true }))\n    const queue = state.useArrayQueue\n        ? new ObservableArrayQueue<Piece>(5)\n        : new ObservableLinkedListQueue<Piece>()\n    const machine = new Machine(queue)\n\n    return (\n        <>\n            <input type=\"radio\" name=\"yeah\" id=\"r1\" checked={state.useArrayQueue} onChange={action(e => { state.useArrayQueue = e.target.checked })} />\n            <label htmlFor=\"r1\">Последовательная</label>\n            <br />\n            <input type=\"radio\" name=\"yeah\" id=\"r2\" checked={!state.useArrayQueue} onChange={action(e => { state.useArrayQueue = !e.target.checked })} />\n            <label htmlFor=\"r2\">Связная</label>\n            <MachineView machine={machine} />\n        </>\n    )\n}\n\nexport default observer(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}