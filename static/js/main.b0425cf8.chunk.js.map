{"version":3,"sources":["Machine/Machine.module.css","Machine/Machine.ts","Piece/PieceView.tsx","Piece/PieceList.tsx","Machine/MachineView.tsx","Queue/ArrayQueue.ts","Queue/LinkedListQueue.ts","App.tsx","index.tsx","Piece/Piece.module.css"],"names":["module","exports","Machine","queue","this","pieces","makeObservable","clear","lastProcessed","undefined","isEmpty","current","peek","timeLeft","dequeue","piece","isFull","keyedPiece","key","uuid","enqueue","contents","observable","action","computed","observer","className","styles","code","PieceList","style","pieceList","map","p","machine","buttonList","onClick","chance","Chance","addPiece","word","length","capitalize","addRandom","progress","dump","reset","ArrayQueue","size","array","head","tail","count","Array","makeAutoObservable","item","Error","result","slice","filter","i","LinkedListQueue","newNode","firstNode","next","lastNode","arr","currentNode","push","state","useLocalObservable","useArrayQueue","console","log","type","name","id","checked","onChange","e","target","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0425cf8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"machine\":\"Machine_machine__Bibia\",\"idkWhatToCallThis\":\"Machine_idkWhatToCallThis__yzbY3\",\"buttonList\":\"Machine_buttonList__30CQA\"};","import { action, computed, makeObservable, observable} from 'mobx'\nimport IQueue from '../Queue/IQueue'\nimport Piece from '../Piece/Piece'\nimport Keyed from '../Keyed'\nimport { v4 as uuid } from 'uuid'\n\nexport default class Machine {\n    @observable private pieces: IQueue<Keyed<Piece>>\n    @observable lastProcessed?: Piece\n\n    constructor(queue: IQueue<Keyed<Piece>>) {\n        this.pieces = queue\n        makeObservable(this)\n    }\n\n    @action reset() {\n        this.pieces.clear()\n        this.lastProcessed = undefined\n    }\n\n    @action progress() {\n        if (this.pieces.isEmpty()) return\n        const current = this.pieces.peek()\n        current.timeLeft -= 1\n        if (current.timeLeft <= 0) this.lastProcessed = this.pieces.dequeue()\n    }\n\n    @action dump() {\n        if (this.pieces.isEmpty()) return\n        this.lastProcessed = this.pieces.dequeue()\n    }\n\n    @action addPiece(piece: Piece) {\n        if (this.isFull) return\n        const keyedPiece = { ...piece, key: uuid() }\n        this.pieces.enqueue(keyedPiece)\n    }\n\n    @computed get anyQueued() {\n        return !this.pieces.isEmpty()\n    }\n\n    @computed get contents() {\n        return this.pieces.contents()\n    }\n\n    @computed get isFull() {\n        return this.pieces.isFull()\n    }\n}\n","import { observer } from 'mobx-react'\nimport Piece from './Piece'\nimport styles from './Piece.module.css'\n\ntype Props = {\n    piece: Piece\n}\n\nconst PieceView = ({ piece }: Props) => (\n    <div className={styles.piece}>\n        <div className={styles.code}>\n            <span>{piece.code}</span>\n        </div>\n        <div className={styles.timeLeft}>\n            <span>{piece.timeLeft}</span>\n        </div>\n    </div>\n)\n\nexport default observer(PieceView)\n","import style from './Piece.module.css'\nimport Keyed from '../Keyed'\nimport Piece from './Piece'\nimport PieceView from './PieceView'\n\ntype Props = {\n    pieces: Keyed<Piece>[]\n}\n\nconst PieceList = ({ pieces }: Props) => (\n    <div className={style.pieceList}>\n        {pieces.map(p => (\n            <PieceView piece={p} key={p.key} />\n        ))}\n    </div>\n)\n\nexport default PieceList","import { observer } from 'mobx-react'\nimport styles from './Machine.module.css'\nimport PieceList from '../Piece/PieceList'\nimport Machine from './Machine'\nimport Chance from 'chance'\n\ntype Props = {\n    machine: Machine\n}\n\nconst addRandom = (machine: Machine) => {\n    const chance = new Chance()\n    machine.addPiece({\n        code: chance.word({ length: 4, capitalize: false }),\n        timeLeft: 5,\n    })\n}\n\nconst MachineView = ({ machine }: Props) => (\n    <div className={styles.machine}>\n        <div className={styles.buttonList}>\n            <button onClick={() => addRandom(machine)}>добавить</button>\n            <button onClick={() => machine.progress()}>обработать</button>\n            <button onClick={() => machine.dump()}>снять</button>\n            <button onClick={() => machine.reset()}>сбросить</button>\n        </div>\n\n        <span>\n            Последняя обработанная деталь:{' '}\n            {machine.lastProcessed && (\n                <span>\n                    {machine.lastProcessed.code}{' '}\n                    {machine.lastProcessed.timeLeft > 0 &&\n                        '(снята с обработки)'}{' '}\n                </span>\n            )}\n        </span>\n        <br />\n        <span>Очередь:</span>\n        {machine.contents.length > 0 && <PieceList pieces={machine.contents} />}\n    </div>\n)\n\nexport default observer(MachineView)\n","import { makeAutoObservable } from 'mobx'\nimport IQueue from './IQueue'\n\nexport default class ArrayQueue<T> implements IQueue<T> {\n    private array: (T | undefined)[]\n    private head: number\n    private tail: number\n    private count = 0\n\n    constructor(readonly size: number) {\n        this.array = Array<T>(size + 1)\n        this.head = 0\n        this.tail = 0\n        makeAutoObservable(this)\n    }\n\n    enqueue(item: T): void {\n        if (this.isFull()) throw new Error('Queue is full')\n        this.array[this.tail] = item\n        this.tail = (this.tail + 1) % (this.size + 1)\n        this.count += 1\n    }\n\n    dequeue(): T {\n        if (this.isEmpty()) throw new Error('Queue is empty')\n        const result = this.peek()\n        this.array[this.head] = undefined\n        this.head = (this.head + 1) % (this.size + 1)\n        this.count -= 1\n\n        return result\n    }\n\n    peek(): T {\n        if (this.isEmpty()) throw new Error('Queue is empty')\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.array[this.head]!\n    }\n    \n    clear() {\n        this.count = 0\n        this.array = Array<T>(this.size + 1)\n        this.head = 0\n        this.tail = 0\n    }\n\n    length(): number {\n        return this.count\n    }\n\n    isFull(): boolean {\n        return this.count === this.size\n    }\n\n    isEmpty(): boolean {\n        return this.count === 0\n    }\n\n    contents(): T[] {\n        if (this.tail >= this.head) {\n            return this.array\n                .slice(this.head, this.tail + 1)\n                .filter((i): i is T => i !== undefined)\n        } else\n            return [\n                ...this.array.slice(this.head),\n                ...this.array.slice(0, this.tail),\n            ].filter((i): i is T => i !== undefined)\n    }\n}\n","import { makeAutoObservable, observable } from 'mobx'\nimport IQueue from './IQueue'\n\ntype Node<T> = {\n    item: T\n    next?: Node<T>\n}\n\nexport default class LinkedListQueue<T> implements IQueue<T> {\n    @observable private firstNode?: Node<T>\n    @observable private lastNode?: Node<T>\n    private size = 0\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    enqueue(item: T): void {\n        const newNode = { item }\n\n        if (!this.firstNode) {\n            this.firstNode = newNode\n            this.lastNode = newNode\n        } else if (!this.firstNode.next) {\n            this.lastNode = newNode\n            this.firstNode.next = this.lastNode\n        } else if (this.lastNode) {\n            this.lastNode.next = newNode\n            this.lastNode = this.lastNode.next\n        }\n\n        this.size += 1\n    }\n\n    dequeue(): T {\n        if (!this.firstNode) throw new Error('Queue is empty')\n        const result = this.firstNode.item\n        if (this.lastNode === this.firstNode) this.lastNode = undefined\n        this.firstNode = this.firstNode.next\n        return result\n    }\n\n    peek(): T {\n        if (!this.firstNode) throw new Error('Queue is empty')\n        return this.firstNode.item\n    }\n\n    clear(): void {\n        this.firstNode = undefined\n        this.lastNode = undefined\n    }\n\n    length(): number {\n        return this.size\n    }\n\n    isFull(): boolean {\n        return false\n    }\n\n    isEmpty(): boolean {\n        return !this.firstNode\n    }\n\n    contents(): T[] {\n        const arr = []\n        let currentNode = this.firstNode\n        while (currentNode) {\n            arr.push(currentNode.item)\n            currentNode = currentNode.next\n        }\n\n        return arr\n    }\n}\n","import { action } from 'mobx'\nimport { observer, useLocalObservable } from 'mobx-react'\nimport Keyed from './Keyed'\nimport Machine from './Machine/Machine'\nimport MachineView from './Machine/MachineView'\nimport Piece from './Piece/Piece'\nimport ArrayQueue from './Queue/ArrayQueue'\nimport LinkedListQueue from './Queue/LinkedListQueue'\n\nfunction App() {\n    const state = useLocalObservable(() => ({ useArrayQueue: true }))\n    const queue = state.useArrayQueue\n        ? new ArrayQueue<Keyed<Piece>>(5)\n        : new LinkedListQueue<Keyed<Piece>>()\n    const machine = new Machine(queue)\n    console.log(state.useArrayQueue)\n    return (\n        <>\n            <input\n                type=\"radio\"\n                name=\"yeah\"\n                id=\"r1\"\n                checked={state.useArrayQueue}\n                onChange={action(e => {\n                    state.useArrayQueue = e.target.checked\n                })}\n            />\n            <label htmlFor=\"r1\">Последовательная</label>\n            <br />\n            <input\n                type=\"radio\"\n                name=\"yeah\"\n                id=\"r2\"\n                checked={!state.useArrayQueue}\n                onChange={action(e => {\n                    state.useArrayQueue = !e.target.checked\n                })}\n            />\n            <label htmlFor=\"r2\">Связная</label>\n            <MachineView machine={machine} />\n        </>\n    )\n}\n\nexport default observer(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceList\":\"Piece_pieceList__3QWS1\",\"piece\":\"Piece_piece__3YSQf\",\"code\":\"Piece_code__2Sh0w\"};"],"sourceRoot":""}